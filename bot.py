import asyncio
import logging
from dotenv import load_dotenv
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from api import get_prices, SUPPORTED_COINS
from portfolio import load_data, save_data, show_portfolio, show_history, back_keyboard
from utils import main_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º main_keyboard –∏–∑ utils.py
from ml import forecast  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é forecast

logging.basicConfig(
    filename="bot.log",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    encoding="utf-8"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CACHE_EXPIRY = 300

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

def coin_selection_keyboard():
    keyboard = [
        [InlineKeyboardButton(f"{v['emoji']} {k.upper()}", callback_data=f"select_coin_{k}") 
         for k, v in SUPPORTED_COINS.items()]
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(keyboard)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "back":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    elif query.data == "add":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É:", reply_markup=coin_selection_keyboard())
    elif query.data.startswith("select_coin_"):
        coin = query.data.split("_")[2]
        context.user_data["selected_coin"] = coin
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {coin.upper()}. –í–≤–µ–¥–∏—Ç–µ: –ö–û–õ–ò–ß–ï–°–¢–í–û –°–£–ú–ú–ê\n–ü—Ä–∏–º–µ—Ä: 100 500",
            reply_markup=back_keyboard()
        )
        context.user_data["awaiting_add"] = True
    elif query.data == "forecast":
        await query.edit_message_text(
            "üìà *–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ 7 –¥–Ω–µ–π*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (USD):\n–ü—Ä–∏–º–µ—Ä: `100`",
            reply_markup=back_keyboard(), parse_mode="Markdown"
        )
        context.user_data["awaiting_forecast"] = True
    elif query.data == "portfolio":
        prices = await get_prices(context)
        await show_portfolio(query, context, prices)
    elif query.data == "history":
        await show_history(query, context)
    elif query.data == "help":
        help_text = (
            "üìö *–°–ø—Ä–∞–≤–∫–∞:*\n‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É üí∞ - –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n"
            "üìÇ –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å üìä - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\nüìñ –ò—Å—Ç–æ—Ä–∏—è üìú - –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ 7 –¥–Ω–µ–π üìà - –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏\n‚ùì –ü–æ–º–æ—â—å ‚ÑπÔ∏è - –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ\n"
            "–§–æ—Ä–º–∞—Ç: `–ö–û–õ–ò–ß–ï–°–¢–í–û –°–£–ú–ú–ê`\n–ü—Ä–∏–º–µ—Ä: `100 500` –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã"
        )
        await query.edit_message_text(help_text, reply_markup=back_keyboard(), parse_mode="Markdown")

async def add_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_add", False):
        return
    text = update.message.text.split()
    coin = context.user_data.get("selected_coin")
    if len(text) != 2 or not coin:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n–ü—Ä–∏–º–µ—Ä: 100 500", reply_markup=back_keyboard())
        return
    try:
        amount = float(text[0])
        cost = float(text[1])
        if amount <= 0 or cost < 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: 100 500", reply_markup=back_keyboard())
        return
    coin_emoji = SUPPORTED_COINS[coin]["emoji"]
    context.bot_data["purchases"].append({
        "coin": coin.upper(), "amount": amount, "cost": cost,
        "date": datetime.now().strftime("%Y-%m-%d")
    })
    save_data(context.bot_data)
    await update.message.reply_text(
        f"{coin_emoji} ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {coin.upper()} –Ω–∞ ${cost:.2f}",
        reply_markup=main_keyboard()
    )
    context.user_data["awaiting_add"] = False
    context.user_data["selected_coin"] = None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_forecast", False):
        try:
            investment = float(update.message.text)
            if investment <= 0:
                raise ValueError
            await forecast(update, context, investment)
            context.user_data["awaiting_forecast"] = False
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n–ü—Ä–∏–º–µ—Ä: `100`", reply_markup=back_keyboard(), parse_mode="Markdown"
            )
    elif context.user_data.get("awaiting_add", False):
        await add_purchase(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=main_keyboard())

async def update_prices_task(context: ContextTypes.DEFAULT_TYPE):
    while True:
        try:
            prices = await get_prices(context)
            logger.info(f"–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {prices}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
        await asyncio.sleep(CACHE_EXPIRY)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")
    context_data = load_data()
    app = ApplicationBuilder().token(TOKEN).build()
    app.bot_data.update(context_data)
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")
    app.job_queue.run_repeating(update_prices_task, interval=CACHE_EXPIRY, first=0)
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    app.run_polling()

if __name__ == "__main__":
    main()