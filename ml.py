import numpy as np
from sklearn.ensemble import RandomForestRegressor
import logging
from api import SUPPORTED_COINS, get_historical_data
from utils import main_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º main_keyboard –∏–∑ utils.py

logger = logging.getLogger(__name__)

def calculate_features(prices, volumes):
    prices = np.array(prices)
    volumes = np.array(volumes)
    sma_7 = np.convolve(prices, np.ones(7)/7, mode='valid')  # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
    delta = np.diff(prices)  # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    return np.column_stack((
        range(len(prices)),
        volumes,
        np.pad(sma_7, (len(prices) - len(sma_7), 0), 'edge'),
        np.pad(delta, (1, 0), 'constant')
    ))

async def forecast(update, context, investment):
    prices = context.bot_data.get("prices", {})
    if not prices:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é main_keyboard
        )
        return
    recommendations = []
    for coin, info in SUPPORTED_COINS.items():
        current_price = prices.get(coin)
        if not current_price:
            logger.warning(f"–ù–µ—Ç —Ü–µ–Ω—ã –¥–ª—è {coin}")
            continue
        try:
            prices_hist, volumes_hist = await get_historical_data(info["id"], 30)
            if len(prices_hist) < 7:
                future_price = current_price * 1.05
                logger.info(f"–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            else:
                X = calculate_features(prices_hist, volumes_hist)
                y = np.array(prices_hist)
                model = RandomForestRegressor(n_estimators=100, random_state=42)
                model.fit(X, y)
                future_X = calculate_features(
                    prices_hist + [current_price] * 7,
                    volumes_hist + [volumes_hist[-1]] * 7
                )[-1:]
                future_price = model.predict(future_X)[0]
                logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {coin} —É—Å–ø–µ—à–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ML –¥–ª—è {coin}: {e}")
            future_price = current_price * 1.05
        profit = (future_price - current_price) * (investment / current_price)
        if profit >= 10:
            recommendations.append({
                "coin": coin.upper(), "emoji": info["emoji"],
                "profit": profit, "future_price": future_price,
                "current_price": current_price
            })
    recommendations.sort(key=lambda x: x["profit"], reverse=True)
    if recommendations:
        response = "üìà *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:*\n\n"
        for rec in recommendations:
            response += (
                f"{rec['emoji']} {rec['coin']}\n–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏: ${rec['profit']:.2f}\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${rec['current_price']:.2f}\n"
                f"–¶–µ–Ω–∞ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π: ${rec['future_price']:.2f}\n\n"
            )
    else:
        response = "‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞."
    await update.message.reply_text(response, reply_markup=main_keyboard(), parse_mode="Markdown")